[
  {
    "topic": "Functions",
    "text": "What will be the output of the following program?",
    "code": "int add(int a, int b){ return a + b; }\nint main(){ printf(\"%d\", add(2, add(3,4))); return 0; }",
    "options": ["9", "7", "5", "Compilation error"],
    "correct": [0],
    "multiple": false,
    "explanation": "The inner add(3,4) = 7; then add(2,7) = 9."
  },
  {
    "topic": "Functions",
    "text": "What happens when a function parameter is a pointer passed by value?",
    "options": [
      "The function can modify the original pointer's address.",
      "The function can modify the data pointed to by the pointer.",
      "Neither the pointer nor data can be modified.",
      "The function receives a reference to the pointer itself."
    ],
    "correct": [1],
    "multiple": false,
    "explanation": "Pointers are passed by value, but they can modify the data they point to."
  },
  {
    "topic": "Functions",
    "text": "What will be the output?",
    "code": "void change(int *p){ *p = *p + 5; }\nint main(){ int x=10; change(&x); printf(\"%d\", x); }",
    "options": ["10", "15", "Garbage", "Compilation error"],
    "correct": [1],
    "multiple": false,
    "explanation": "Passing &x allows the function to modify the actual variable via pointer."
  },
  {
    "topic": "Functions",
    "text": "What will this code print?",
    "code": "int fun(int n){ if(n==0) return 0; return n + fun(n-1); }\nint main(){ printf(\"%d\", fun(3)); }",
    "options": ["3", "6", "9", "Infinite recursion"],
    "correct": [1],
    "multiple": false,
    "explanation": "fun(3) = 3 + 2 + 1 + 0 = 6 (recursion)."
  },
  {
    "topic": "Functions",
    "text": "Which declaration correctly defines a pointer to a function returning int and taking two ints?",
    "options": [
      "int *f(int,int);",
      "int (*f)(int,int);",
      "int f(int*,int*);",
      "int (*f)();"
    ],
    "correct": [1],
    "multiple": false,
    "explanation": "int (*f)(int,int) is a pointer to a function taking two ints and returning int."
  },
  {
    "topic": "Functions",
    "text": "What is printed by this program?",
    "code": "int square(int n){ return n*n; }\nint main(){ int (*fp)(int) = square; printf(\"%d\", fp(4)); }",
    "options": ["16", "8", "4", "Compilation error"],
    "correct": [0],
    "multiple": false,
    "explanation": "fp is a pointer to square(); calling fp(4) executes square(4)."
  },
  {
    "topic": "Functions",
    "text": "If a function prototype is missing, what default return type does C assume?",
    "options": ["int", "void", "float", "undefined"],
    "correct": [0],
    "multiple": false,
    "explanation": "Historically, C assumes int as the default return type."
  },
  {
    "topic": "Functions",
    "text": "What is the output?",
    "code": "int func(int a){ return ++a; }\nint main(){ int (*p)(int)=func; printf(\"%d\", (*p)(5)); }",
    "options": ["5", "6", "7", "Compilation error"],
    "correct": [1],
    "multiple": false,
    "explanation": "Function pointer p calls func(5), returning 6."
  },
  {
    "topic": "Functions",
    "text": "How many times will 'Hello' print?",
    "code": "void say(){ static int count=0; if(count<3){ printf(\"Hello\\n\"); count++; say(); }}\nint main(){ say(); }",
    "options": ["1", "3", "Infinite", "Depends on compiler"],
    "correct": [1],
    "multiple": false,
    "explanation": "The static variable count retains its value across recursive calls."
  },
  {
    "topic": "Functions",
    "text": "What happens if a recursive function has no base condition?",
    "options": [
      "Compiler error",
      "Stack overflow at runtime",
      "Function runs infinitely without consuming memory",
      "The program terminates gracefully"
    ],
    "correct": [1],
    "multiple": false,
    "explanation": "Without a base case, recursion never ends, leading to stack overflow."
  },
  {
    "topic": "Arrays",
    "text": "What is the output?",
    "code": "int arr[]={1,2,3,4}; printf(\"%d\", *(arr+2));",
    "options": ["1", "2", "3", "4"],
    "correct": [2],
    "multiple": false,
    "explanation": "arr+2 points to the 3rd element (index 2)."
  },
  {
    "topic": "Arrays",
    "text": "Which of the following accesses the 2nd row, 3rd column element of a 2D array int a[3][4]?",
    "options": ["a[1][2]", "a[2][3]", "a[3][2]", "a[0][1]"],
    "correct": [0],
    "multiple": false,
    "explanation": "C uses 0-based indexing, so row=1, column=2 refers to 2nd row, 3rd column."
  },
  {
    "topic": "Arrays",
    "text": "What does the following print?",
    "code": "char str[] = {'H','i','\\0'};\nprintf(\"%s\", str);",
    "options": ["Hi", "H", "i", "Error"],
    "correct": [0],
    "multiple": false,
    "explanation": "The array forms a valid string since itâ€™s null-terminated."
  },
  {
    "topic": "Arrays",
    "text": "Which of the following correctly initializes a 2D array?",
    "options": [
      "int a[2][3] = {1,2,3,4,5,6};",
      "int a[2,3] = {{1,2,3},{4,5,6}};",
      "int a[2][3] = {{1,2,3},{4,5,6}};",
      "array a[2][3] = {{1,2,3},{4,5,6}};"
    ],
    "correct": [2],
    "multiple": false,
    "explanation": "C uses braces for rows and columns like {{1,2,3},{4,5,6}}."
  },
  {
    "topic": "Arrays",
    "text": "What is the result?",
    "code": "int a[5]={1,2,3,4,5}; int *p=a; p+=2; printf(\"%d\", *p);",
    "options": ["1", "2", "3", "5"],
    "correct": [2],
    "multiple": false,
    "explanation": "p+=2 moves pointer to a[2], whose value is 3."
  },
  {
    "topic": "Arrays",
    "text": "Which statement about memory layout of 2D arrays in C is correct?",
    "options": [
      "Elements are stored row by row (row-major order).",
      "Elements are stored column by column.",
      "Stored randomly in memory.",
      "Compiler decides layout dynamically."
    ],
    "correct": [0],
    "multiple": false,
    "explanation": "C stores multi-dimensional arrays in row-major order."
  },
  {
    "topic": "Arrays",
    "text": "What will happen?",
    "code": "char s1[]=\"Hello\"; char s2[]=\"World\"; strcat(s1,s2); printf(\"%s\",s1);",
    "options": ["HelloWorld", "World", "Error", "Undefined behavior"],
    "correct": [3],
    "multiple": false,
    "explanation": "s1 has only 6 bytes (no extra space), so strcat causes overflow."
  },
  {
    "topic": "Arrays",
    "text": "How do you compute number of elements in an array arr?",
    "options": [
      "sizeof(arr)/sizeof(arr[0])",
      "length(arr)",
      "arr.length",
      "sizeof(arr)"
    ],
    "correct": [0],
    "multiple": false,
    "explanation": "sizeof(arr)/sizeof(arr[0]) gives count of elements."
  },
  {
    "topic": "Arrays",
    "text": "What does this code print?",
    "code": "int a[2][2]={{1,2},{3,4}}; printf(\"%d\", *(*(a+1)));",
    "options": ["1", "2", "3", "4"],
    "correct": [2],
    "multiple": false,
    "explanation": "*(*(a+1)) points to the first element of the second row."
  },
  {
    "topic": "Arrays",
    "text": "What will this code output?",
    "code": "char s[]=\"abcd\"; s[2]='Z'; printf(\"%s\",s);",
    "options": ["abZd", "abcd", "ab", "Error"],
    "correct": [0],
    "multiple": false,
    "explanation": "Replaces character at index 2 (c) with Z."
  },
  {
    "topic": "Pointers",
    "text": "What will the following print?",
    "code": "int a=5; int *p=&a; printf(\"%p\",p);",
    "options": ["Address of a", "5", "Undefined", "0"],
    "correct": [0],
    "multiple": false,
    "explanation": "Using %p prints pointer (address) value."
  },
  {
    "topic": "Pointers",
    "text": "What happens here?",
    "code": "int a=10; int *p=&a; int **q=&p; printf(\"%d\", **q);",
    "options": ["10", "Address of p", "Address of a", "Error"],
    "correct": [0],
    "multiple": false,
    "explanation": "**q dereferences twice to access the value of a (10)."
  },
  {
    "topic": "Pointers",
    "text": "What is the output?",
    "code": "int arr[]={1,2,3}; int *p=arr; *(p+1)=10; printf(\"%d\", arr[1]);",
    "options": ["1", "10", "2", "Compilation error"],
    "correct": [1],
    "multiple": false,
    "explanation": "Pointer arithmetic allows modifying array elements via pointer."
  },
  {
    "topic": "Pointers",
    "text": "What is the output?",
    "code": "int x=5; int *p=&x; *p++; printf(\"%d\",x);",
    "options": ["5", "Garbage", "Depends on compiler", "Undefined behavior"],
    "correct": [0],
    "multiple": false,
    "explanation": "*p++ increments pointer, not the value of x."
  },
  {
    "topic": "Pointers",
    "text": "Which of the following correctly declares an array of 3 integer pointers?",
    "options": [
      "int *arr[3];",
      "int arr[*3];",
      "int arr(3*);",
      "pointer arr(3);"
    ],
    "correct": [0],
    "multiple": false,
    "explanation": "int *arr[3]; declares an array of 3 pointers to int."
  },
  {
    "topic": "Pointers",
    "text": "What will be printed?",
    "code": "int a[3]={10,20,30}; int *p=a; p++; printf(\"%d\",*p);",
    "options": ["10", "20", "30", "Error"],
    "correct": [1],
    "multiple": false,
    "explanation": "p++ points to second element (value 20)."
  },
  {
    "topic": "Pointers",
    "text": "What is true about pointer subtraction?",
    "options": [
      "Subtracting two pointers gives number of elements between them.",
      "It gives byte difference always.",
      "It is undefined.",
      "Not allowed in C."
    ],
    "correct": [0],
    "multiple": false,
    "explanation": "Pointer subtraction returns element distance when within same array."
  },
  {
    "topic": "Pointers",
    "text": "What will this print?",
    "code": "int a=5; int *p=&a; int b=*p++; printf(\"%d\",b);",
    "options": ["5", "Address of a", "Garbage", "Undefined"],
    "correct": [0],
    "multiple": false,
    "explanation": "b=*p++ assigns value pointed by p (5) before incrementing p."
  },
  {
    "topic": "Pointers",
    "text": "What is the difference between *++p and ++*p?",
    "options": [
      "*++p increments the pointer first; ++*p increments the value pointed to.",
      "Both increment pointer and value.",
      "They are identical.",
      "*++p increments the value before pointer."
    ],
    "correct": [0],
    "multiple": false,
    "explanation": "*++p moves pointer; ++*p increments the value it points to."
  },
  {
    "topic": "Pointers",
    "text": "What will this code output?",
    "code": "int a=5,b=6; int *p=&a,*q=&b; printf(\"%ld\", q-p);",
    "options": [
      "1 or -1 (depends on addresses)",
      "Garbage value",
      "0",
      "Compiler error"
    ],
    "correct": [0],
    "multiple": false,
    "explanation": "Pointer subtraction gives element difference, valid only in same array but compiles here producing undefined numeric offset."
  }
]
